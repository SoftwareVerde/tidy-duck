group 'com.softwareverde'
version '1.0.0'

apply plugin: 'war'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

ext.configuration = project.hasProperty('configuration') ? project.configuration : 'development'
sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir "src/$configuration/resources"
        }
    }
}

dependencies {
    compileOnly 'org.apache.tomcat:tomcat-servlet-api:7.0.37'

    compile group: 'com.github.softwareverde', name: 'json', version: 'v1.+'
    compile group: 'com.github.softwareverde', name: 'java-util', version: 'v0.1.4'
    compile group: 'com.github.softwareverde', name: 'java-db-mysql', version: 'v2.0.2+'

    // Logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.9'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    compile project(":..:most-adapter")

    testCompile 'org.apache.tomcat:tomcat-servlet-api:7.0.37'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.github.softwareverde', name: 'java-mock', version: 'v1+'
    testCompile group: 'com.github.softwareverde', name: 'java-db-h2-mysql', version: 'v2+'
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (! desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
