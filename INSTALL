////////////////////////////
// Tidy Duck Installation //
////////////////////////////

============
Dependencies
============

    - Tomcat (7.0+)
    - MySQL  (5.5+)
    - Java   (1.7+)

===========
MySQL Setup
===========

    ----------------------
    Database Configuration
    ----------------------
        For each environment, put the connection details in the file:

            app/src/{environment}/resources/server.conf

    ------------------
    Enable Strict Mode
    ------------------
        Edit /etc/mysql/my.cnf, add the following line below the 'query-cache-size' property (under the [mysqld] heading):

            sudo vim /etc/mysql/my.cnf
                sql_mode = TRADITIONAL

        (This will enable strict mode in order to enforce data integrity constraints.)


    ------------------
    Load MySQL Schema
    ------------------
        1. From the tidy-duck directory, connect to MySQL

            mysql -u root -p

        2. Run the init-schema.sql script.

            source sql/init-schema.sql

        3. Run the init.sql script.

            use tidy_duck;
            source sql/init.sql

    ------------------
    Create MySQL User
    ------------------

        Create the application sql-account (with limited access)
        Be sure to modify the command below to use the password set within app/src/{environment}/resources/server.conf

            mysql -u root -p tidy_duck -e "DROP USER IF EXISTS tidy_duck; CREATE USER 'tidy_duck'@'%' IDENTIFIED BY '__PASSWORD__'; GRANT SELECT, INSERT, UPDATE, DELETE ON tidy_duck.* TO 'tidy_duck'@'%'; FLUSH PRIVILEGES;"

===========
Logging
===========

    Create the logging destination directory.
    (This file may be configured within app/src/{environment}/resources/log4j2.xml)

        sudo mkdir /var/log/tidy-duck
        sudo chmod -R 770 /var/log/tidy-duck
        sudo chown -R tomcat7:tomcat7 /var/log/tidy-duck

===========
Create User Accounts
===========

    1. Update the accounts sql-script:
    Passwords are hashed via sha256. The default password provided is "quack quack".

        vim sql/init-accounts.sql

    2. From the tidy-duck directory, connect to MySQL and run the sql script:

        mysql -u root -p
        use tidy_duck;
        source sql/init-accounts.sql

===========
Compilation
===========

    Tidy Duck uses Java with Gradle to compile the application.
    Be sure a java-jdk is installed for your system.
    It may be a wise choice to compile the project on your local machine instead of the server.
    A convenience script is located at:

        scripts/make.sh

    This script will echo the location of the war file for deployment.

===========
Deployment
===========

    Tidy Duck is a Tomcat7 application. To deploy it, take the generated war file and move it to the Tomcat Modules directory.
    The application should be the only application on the server; thus "ROOT.war" should be the name of the application file.

    Deploying the war remotely:
        A deploy script (scripts/deploy.sh) is provided for easy deployment from your local machine.
        The script accepts two arguments, the first being the path to the war file, the second argument being the ip/url of the server.
        The script will prompt you for your password multiple times; the first 2 times being your ssh password (unless you have an ssh key established),
        the 3rd prompt will be requesting sudo for your account on the server machine to deploy the jar.

        Example invocation:

            ./scripts/deploy.sh app/build/libs/tidy-duck-v1.0.war 10.1.2.173

    Server-Side/Manual Installation:

        sudo mv app/build/libs/*.war /var/lib/tomcat7/webapps/ROOT.war
        sudo chown tomcat7:tomcat7 /var/lib/tomcat7/webapps/ROOT.war


===========
SSL Setup
===========

    TODO

===========
Web Access
===========

    Tomcat is configured to listen on port 8080 by default.
    Depending on your network configuration, it may be best to setup a reverse proxy.
    Alternatively, you can configure Tomcat to listen on port 80, or to forward ports from port 80 to 8080.

    Forwarding ports:

        sudo iptables -t nat -A OUTPUT -o lo -p tcp --dport 80 -j REDIRECT --to-port 8080


    Configure Tomcat Port for 80:

        TODO

